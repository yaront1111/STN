#!/usr/bin/env python3
"""
Production data preparation for STN navigation
Prepares real flight data for processing with SRTM terrain
"""

import sys
import os
import pandas as pd
import numpy as np
from pathlib import Path

sys.path.append(os.path.dirname(__file__))
from srtm_reader import SRTMReader, ned_to_latlon
from flight_data_loader import FlightDataLoader

def prepare_flight_for_navigation(
    imu_file,
    initial_lat,
    initial_lon, 
    initial_alt_msl,
    output_dir="data/flight"
):
    """
    Prepare real flight data for STN navigation
    
    Args:
        imu_file: Path to IMU data CSV (t, ax, ay, az, gx, gy, gz)
        initial_lat: Starting latitude (degrees)
        initial_lon: Starting longitude (degrees)
        initial_alt_msl: Initial altitude above MSL (meters)
        output_dir: Output directory for processed data
    """
    
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Load IMU data
    loader = FlightDataLoader(output_dir.parent)
    imu = loader.load_imu_data(imu_file)
    
    # Initialize SRTM reader
    print("\nInitializing SRTM terrain reader...")
    srtm = SRTMReader("data/terrain")
    
    # Get terrain elevation at starting position
    terrain_elev = srtm.get_elevation(initial_lat, initial_lon)
    print(f"Terrain elevation at start: {terrain_elev:.1f}m")
    
    # Calculate AGL
    initial_agl = initial_alt_msl - terrain_elev
    print(f"Initial AGL: {initial_agl:.1f}m")
    
    if initial_agl < 50:
        print("WARNING: Very low initial AGL - check altitude!")
    
    # Generate synthetic radar altimeter from INS trajectory
    # (In production, you would load real radar altimeter data)
    print("\nGenerating radar altimeter estimates...")
    
    # Simple dead-reckoning to estimate position
    # (In production, use actual GPS or integrated nav solution)
    dt = imu['t'].diff().mean()
    
    # Integrate acceleration to get velocity (simplified)
    vn = np.cumsum(imu['ax'] * dt)
    ve = np.cumsum(imu['ay'] * dt)
    vd = np.cumsum((imu['az'] + 9.80665) * dt)  # Remove gravity
    
    # Integrate velocity to get position
    pn = np.cumsum(vn * dt)
    pe = np.cumsum(ve * dt)
    pd = np.cumsum(vd * dt)
    
    # Generate radar altimeter measurements
    radalt_data = []
    for i in range(len(imu)):
        # Convert position to lat/lon
        lat, lon = ned_to_latlon(pn[i], pe[i], initial_lat, initial_lon)
        
        # Get terrain elevation
        terrain_h = srtm.get_elevation(lat, lon)
        
        # Calculate AGL
        alt_msl = initial_alt_msl - pd[i]
        agl = alt_msl - terrain_h
        
        radalt_data.append({
            't': imu['t'].iloc[i],
            'agl': agl
        })
    
    # Save radar altimeter data
    radalt = pd.DataFrame(radalt_data)
    radalt_file = output_dir / "radalt.csv"
    radalt.to_csv(radalt_file, index=False)
    print(f"\nSaved radar altimeter data to: {radalt_file}")
    print(f"  AGL range: {radalt['agl'].min():.1f} to {radalt['agl'].max():.1f}m")
    
    # Copy IMU data to output directory
    imu_output = output_dir / "imu.csv"
    imu.to_csv(imu_output, index=False)
    print(f"\nCopied IMU data to: {imu_output}")
    
    # Create navigation config
    config = f"""# STN Navigation Configuration for Flight Data
# Generated by prepare_flight_data.py

# Initial conditions
initial.lat = {initial_lat}
initial.lon = {initial_lon}
initial.alt_msl = {initial_alt_msl}
initial.terrain_elev = {terrain_elev:.1f}
initial.agl = {initial_agl:.1f}

# File paths
input.imu = {imu_output}
input.radalt = {radalt_file}
output.nav = {output_dir}/nav_output.csv

# Terrain reference
terrain.ref_lat = {initial_lat}
terrain.ref_lon = {initial_lon}
"""
    
    config_file = output_dir / "flight_config.txt"
    with open(config_file, 'w') as f:
        f.write(config)
    print(f"\nSaved flight configuration to: {config_file}")
    
    print("\n" + "="*50)
    print("Flight data prepared for navigation!")
    print(f"Run: ./build/stn_navigator {radalt_file} {imu_output} {output_dir}/nav_output.csv")
    
    return radalt_file, imu_output


if __name__ == "__main__":
    print("STN Flight Data Preparation - Production System")
    print("=" * 50)
    
    if len(sys.argv) < 5:
        print("\nUsage: python prepare_flight_data.py <imu_file> <lat> <lon> <alt_msl>")
        print("\nExample:")
        print("  python prepare_flight_data.py flight_imu.csv 47.4 8.5 1500")
        print("\nThis prepares real flight data for STN navigation using SRTM terrain")
        sys.exit(1)
    
    imu_file = sys.argv[1]
    lat = float(sys.argv[2])
    lon = float(sys.argv[3])
    alt_msl = float(sys.argv[4])
    
    prepare_flight_for_navigation(imu_file, lat, lon, alt_msl)